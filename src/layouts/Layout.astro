---
import { THEME, isDarkThemeDefault } from "@src/constants";
import Header from '@components/Header.astro';
import "@styles/global.css";
// @ts-ignore
import { pwaInfo } from 'virtual:pwa-info';
import ReloadPrompt from '../components/ReloadPrompt.astro';

interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
const { origin } = Astro.url;

const basedOrigin = `${origin}${import.meta.env.BASE_URL}`;
const socialsImage = `${basedOrigin}/socials.png`;
---

<!doctype html>
<html lang="en" data-theme={isDarkThemeDefault ? THEME.DARK : THEME.LIGHT}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width,initial-scale=1">

		<meta name="description" content={description} />
		<meta property="og:title" content={title}>
		<meta property="og:type" content="website" />
		<meta property="og:image" content={socialsImage}>
		<meta property="og:url" content={basedOrigin}>
		<meta name="twitter:card" content="summary_large_image">
		<meta property="og:description" content={description}>
		<meta property="og:site_name" content="Samply Website">
		<meta name="twitter:image:alt" content={title}>

		<meta name="theme-color" content="#282a36">

		<link rel="manifest" href=`${import.meta.env.BASE_URL}/manifest.json`>

		<link rel="icon" href=`${import.meta.env.BASE_URL}/favicon.ico` sizes="48x48">
		<link rel="icon" type="image/svg+xml" href=`${import.meta.env.BASE_URL}/favicon.svg` />
		<link rel="apple-touch-icon" href=`${import.meta.env.BASE_URL}/apple-touch-icon.png` sizes="180x180">

		<title>{title}</title>
		{ pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
	</head>
	<body>
		<main class="max-w-5xl mx-auto px-4 pb-20">
			<Header />
			<slot />
		</main>
		<ReloadPrompt />
	</body>
</html>

<script>
	import { onAuthStateChanged } from 'firebase/auth';
	import { auth } from '@fb/client';
	import { user } from '@src/store.js';
	// import { THEME, isDarkThemeDefault } from '../constants';

	onAuthStateChanged(auth, (u) => {
		if (u) {
			user.set(u);
		} else {
			user.set(null);
		}
	});

	// function toggleTheme() {
	// 	const html = document.querySelector('html');
	
	// 	const currentTheme = html?.getAttribute('data-theme');
	// 	if (currentTheme === THEME.LIGHT) {
	// 		html?.setAttribute('data-theme', THEME.DARK);
	// 		localStorage.setItem('theme', THEME.DARK);
	// 	} else {
	// 		html?.setAttribute('data-theme', THEME.LIGHT);
	// 		localStorage.setItem('theme', THEME.LIGHT);
	// 	}
	// }
	
	// const storedTheme = localStorage.getItem('theme');
	// if (
	// 	(isDarkThemeDefault && storedTheme === THEME.LIGHT)
	// 	|| (!isDarkThemeDefault && storedTheme === THEME.DARK)
	// ) {
	// 	toggleTheme();
	// }
	// const themeCheckbox = document.getElementById('theme-checkbox');
	
	// themeCheckbox?.addEventListener('change', () => toggleTheme());
</script>
